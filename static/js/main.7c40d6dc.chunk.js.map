{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","monsters","className","alt","src","id","name","email","CardList","console","log","map","item","key","SearchBox","handleChange","placeholder","type","onChange","App","e","preventDefault","setState","searchField","target","value","state","prevProps","prevState","fetch","then","res","json","data","catch","err","error","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAEaA,G,MAAO,SAAAC,GAAU,IACnBC,EAAYD,EAAZC,SACP,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAASI,GAAnC,4BAEtB,4BAAKJ,EAASK,MAEd,2BAAIL,EAASM,UCHZC,G,MAAW,SAAAR,GACpBS,QAAQC,IAAIV,GADgB,IAEtBC,EAAYD,EAAZC,SACN,OACI,yBAAKC,UAAW,aAGRD,EAASU,IAAI,SAAAC,GAAI,OAChB,kBAAC,EAAD,CAAMC,IAAMD,EAAKP,GAAIJ,SAAYW,SCZrCE,G,MAAY,SAAAd,GAAS,IACvBe,EAA4Bf,EAA5Be,aAAaC,EAAehB,EAAfgB,YACpB,OACI,6BACG,2BACCd,UAAY,SACZe,KAAO,SACPD,YAAeA,EACfE,SAAYH,OCFHI,G,kBAEnB,WAAYnB,GAAQ,IAAD,8BAEjB,4CAAMA,KAURe,aAAe,SAAAK,GACbA,EAAEC,iBACF,EAAKC,SAAS,CACZC,YAAaH,EAAEI,OAAOC,OACtB,kBAAKhB,QAAQC,IAAI,UAAW,EAAKgB,MAAMH,gBAZzC,EAAKG,MAAO,CACVzB,SAAS,GACTsB,YAAY,IANG,E,+EAuBDI,EAAUC,GAAW,IAAD,OAEpCC,MAAM,8CAELC,KAAK,SAAAC,GAAG,OAAKA,EAAIC,SAEjBF,KAAK,SAAAG,GACJ,EAAKX,SAAS,CACZrB,SAASgC,EACTV,YAAa,OAGhBW,MAAM,SAAAC,GAAG,OAAI1B,QAAQ2B,MAAMD,O,+BAGrB,MAEwBE,KAAKX,MAA7BzB,EAFA,EAEAA,SAASsB,EAFT,EAESA,YACVe,EAAmBrC,EAASsC,OAAO,SAAA3B,GAAI,OAC3CA,EAAKN,KAAKkC,cAAcC,SAASlB,EAAYiB,iBAG/C,OACE,yBAAKtC,UAAU,OACb,kDACA,kBAAC,EAAD,CACEc,YAAc,kBACdD,aAAgBsB,KAAKtB,eAGvB,kBAAC,EAAD,CAAUd,SAAYqC,S,GAvDGI,cCGbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.7c40d6dc.chunk.js","sourcesContent":["import React from 'react'\nimport \"./card.styles.css\"\nexport const Card = props => {\n    const {monsters} = props\n    return (\n        <div className=\"card-container\">\n            <img alt=\"monster\" src={`https://robohash.org/${monsters.id}?set=set2&size=180x180`} />\n            \n            <h2>{monsters.name}</h2>\n\n            <p>{monsters.email}</p>\n        </div>\n    )\n}\n","import React from 'react'\n\nimport {Card} from '../card/card.component'\n\nimport \"./card-list.styles.css\"\n\n\nexport const CardList = props =>{\n    console.log(props)\n    const{monsters} = props\n    return(\n        <div className =\"card-list\">\n            {/* {props.children} */}\n            {\n                monsters.map(item=>(\n                 <Card key ={item.id} monsters = {item} />\n                ))\n            }\n        </div>\n    )\n}","import React from 'react'\nimport './search-box.css'\n\nexport const SearchBox = props =>{\n    const {handleChange,placeholder} = props\n    return (\n        <div>\n           <input\n            className = \"search\"\n            type = \"search\"\n            placeholder = {placeholder}\n            onChange = {handleChange}\n            />\n        </div>\n    )\n}\n","import React,{Component} from 'react';\n\nimport {CardList} from './components/card-list/card-list.component'\n\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\n// class App extends the Component Library, \nexport default class App extends Component {\n  // constructor holds extra props\n  constructor(props) {\n    // inherits properties from the parent component\n    super(props)\n    // state values\n    this.state ={\n      monsters:[],\n      searchField:''\n    }\n    \n  }\n\n  //  methods, handles input value\n  handleChange = e =>{\n    e.preventDefault()\n    this.setState({\n      searchField: e.target.value\n    },()=> console.log('state: ', this.state.searchField))\n\n  }\n\n\n\n  // component life-cycle\n  componentDidMount(prevProps,prevState){\n    // returns promise\n    fetch('https://jsonplaceholder.typicode.com/users')\n    // converts returned promise into a json object\n    .then(res =>  res.json())\n     //  now we have access to the data\n    .then(data => {\n      this.setState({\n        monsters:data,\n        searchField: ''\n      })\n    })\n    .catch(err => console.error(err))\n  }\n  \n  render() {\n    // destructuring should occur in render method\n    const {monsters,searchField} = this.state\n    const filteredMonsters = monsters.filter(item =>(\n      item.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    )\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox\n          placeholder = \"Search Monsters\"\n          handleChange = {this.handleChange}\n        />\n        \n        <CardList monsters = {filteredMonsters}/>\n       \n       \n   \n       \n      </div>\n    )\n  }\n}\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}